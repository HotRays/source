From 8e81fb505de7dd17fc55409135cd2cea0308e0e5 Mon Sep 17 00:00:00 2001
From: fengmushu <fengmushu@gmail.com>
Date: Fri, 11 May 2018 18:56:22 +0800
Subject: [PATCH 1/3] fixup ac200 modules init

---
 drivers/mfd/ac200.c | 143 +++-------------------------------------------------
 1 file changed, 8 insertions(+), 135 deletions(-)
 mode change 100755 => 100644 drivers/mfd/ac200.c

diff --git a/drivers/mfd/ac200.c b/drivers/mfd/ac200.c
old mode 100755
new mode 100644
index 4686d8f..c8156bb
--- a/drivers/mfd/ac200.c
+++ b/drivers/mfd/ac200.c
@@ -24,7 +24,6 @@
 #include <linux/regulator/consumer.h>
 
 #define SUNXI_CHIP_NAME	"ACX00-CHIP"
-static unsigned int twi_id = 0;
 atomic_t acx00_en;
 
 struct regmap_config acx00_base_regmap_config = {
@@ -32,12 +31,8 @@ struct regmap_config acx00_base_regmap_config = {
 	.val_bits = 16,
 };
 static struct regulator *vcc_ave = NULL;
-static char key_name[20] = "ac200";
 static char ave_regulator_name[20] = "vcc-audio-33";
-static int tv_twi_used;
 
-static int sys_script_get_item(char *main_name, char *sub_name, int value[],
-			       int type);
 /**
  * acx00_reg_read: Read a single ACX00 register.
  *
@@ -257,10 +252,9 @@ static int acx00_i2c_probe(struct i2c_client *i2c,
 				      const struct i2c_device_id *id)
 {
 	struct acx00 *acx00;
-	int ret = 0;
-	int value;
+	int ret = 0, value;
+
 	printk("acx00_i2c_probe\n");
-	pr_err("%s,l:%d\n", __func__, __LINE__);
 	acx00 = devm_kzalloc(&i2c->dev, sizeof(struct acx00), GFP_KERNEL);
 	if (acx00 == NULL)
 		return -ENOMEM;
@@ -283,16 +277,13 @@ static int acx00_i2c_probe(struct i2c_client *i2c,
 	}
 	INIT_WORK(&acx00->init_work, acx00_init_work);
 
-	ret = sys_script_get_item(key_name, "tv_pwm_ch", &value, 1);
-	if (ret == 1) {
-		acx00->pwm_ac200 = pwm_request(value, NULL);
-		if (!IS_ERR_OR_NULL(acx00->pwm_ac200)) {
-			pwm_config(acx00->pwm_ac200, 20, 41);
-			pwm_enable(acx00->pwm_ac200);
-		} else
-			dev_warn(acx00->dev, "Warn: can't get pwm device\n");
+	value = 1;  //tv_pwm_ch=1
+	acx00->pwm_ac200 = pwm_request(value, "PWM-SUNXI");
+	if (!IS_ERR_OR_NULL(acx00->pwm_ac200)) {
+		pwm_config(acx00->pwm_ac200, 20, 41);
+		pwm_enable(acx00->pwm_ac200);
 	} else {
-		dev_warn(acx00->dev, "Get tv_pwm_ch failed\n");
+		dev_warn(acx00->dev, "Warn: can't get pwm device\n");
 	}
 
 	atomic_set(&acx00_en, 0);
@@ -374,19 +365,6 @@ static const struct dev_pm_ops acx00_core_pm_ops = {
 	.resume_early = acx00_i2c_resume,
 };
 
-static int acx00_detect(struct i2c_client *client, struct i2c_board_info *info)
-{
-	struct i2c_adapter *adapter = client->adapter;
-
-	pr_info("%s, l:%d, twi_id:%d, adapter->nr:%d\n", __func__, __LINE__, twi_id, adapter->nr);
-	if (twi_id == adapter->nr) {
-		strlcpy(info->type, SUNXI_CHIP_NAME, I2C_NAME_SIZE);
-		return 0;
-	} else {
-		return -ENODEV;
-	}
-}
-
 static unsigned short normal_i2c[] = {0x10, I2C_CLIENT_END};
 
 static const struct i2c_device_id acx00_id[] = {
@@ -414,111 +392,6 @@ static struct i2c_driver acx00_i2c_driver = {
 };
 module_i2c_driver(acx00_i2c_driver);
 
-/* type: 0:invalid, 1: int; 2:str*/
-static int sys_script_get_item(char *main_name, char *sub_name, int value[],
-			       int type)
-{
-	char compat[32];
-	u32 len = 0;
-	struct device_node *node;
-	int ret = 0;
-
-	len = sprintf(compat, "allwinner,sunxi-%s", main_name);
-	if (len > 32) {
-		pr_warn("size of mian_name is out of range\n");
-		goto error_exit;
-	}
-
-	node = of_find_compatible_node(NULL, NULL, compat);
-	if (!node) {
-		pr_warn("of_find_compatible_node %s fail\n", compat);
-		goto error_exit;
-	}
-
-	if (1 == type) {
-		if (of_property_read_u32_array(node, sub_name, value, 1)) {
-			pr_info("of_property_read_u32_array %s.%s fail\n",
-				main_name, sub_name);
-			goto error_exit;
-		} else
-			ret = type;
-	} else if (2 == type) {
-		const char *str;
-
-		if (of_property_read_string(node, sub_name, &str)) {
-			pr_info("of_property_read_string %s.%s fail\n",
-				main_name, sub_name);
-			goto error_exit;
-		} else {
-			ret = type;
-			memcpy((void *)value, str, strlen(str) + 1);
-		}
-	}
-
-	return ret;
-error_exit:
-	return -1;
-}
-
-static int __init acx00_i2c_init(void)
-{
-	int ret = 0;
-	int value;
-	int ac200_used = 0;
-	ret = sys_script_get_item(key_name, "tv_used", &value, 1);
-	if (ret == 1)
-		ac200_used = value;
-
-	if (ac200_used) {
-		ret = sys_script_get_item(key_name, "tv_twi_used", &value,
-					       1);
-		if (ret == 1)
-			tv_twi_used = value;
-		if (tv_twi_used == 1) {
-			ret = sys_script_get_item(key_name, "tv_twi_id",
-						       &value, 1);
-			twi_id = (ret == 1) ? value : twi_id;
-			ret = sys_script_get_item(key_name, "tv_twi_addr",
-						       &value, 1);
-			normal_i2c[0] = (ret == 1) ? value : normal_i2c[0];
-			acx00_i2c_driver.detect = acx00_detect;
-			ret = i2c_add_driver(&acx00_i2c_driver);
-			if (ret != 0)
-				pr_err(
-				    "Failed to register acx00 I2C driver: %d\n",
-				    ret);
-		}
-		ret = sys_script_get_item(key_name, "tv_regulator_name",
-					       (int *)&ave_regulator_name, 2);
-		if (ret == 2) {
-			vcc_ave = regulator_get(NULL, ave_regulator_name);
-			if (IS_ERR_OR_NULL(vcc_ave)) {
-				pr_err("get audio %s failed\n",
-				       ave_regulator_name);
-			} else {
-				ret = regulator_enable(vcc_ave);
-				if (IS_ERR(vcc_ave)) {
-					pr_err(
-					    "[%s]: vcc_ave:regulator_enable() "
-					    "failed!\n",
-					    __func__);
-				}
-			}
-		} else {
-			pr_err("get ave_regulator_name failed!\n");
-		}
-	}
-
-	return ret;
-}
-subsys_initcall_sync(acx00_i2c_init);
-
-static void __exit acx00_i2c_exit(void)
-{
-	i2c_del_driver(&acx00_i2c_driver);
-}
-module_exit(acx00_i2c_exit);
-
 MODULE_DESCRIPTION("Core support for the ACX00X00 audio CODEC");
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("huangxin<huangxin@allwinnertech.com>");
-- 
2.14.2

